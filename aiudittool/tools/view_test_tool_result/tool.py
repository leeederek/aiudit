import json
from typing import Optional

import requests
from decouple import config
from langchain.callbacks.manager import CallbackManagerForToolRun
from langchain.tools import BaseTool

from aiudittool.utils import CMC_NETWORK_NAMES, NETWORKS, get_web3
from pydantic import BaseModel, Field
from typing import Type
import subprocess

class ViewTestToolsResultInput(BaseModel):
    path_to_text_file: str = Field(
        description="The path to the .txt file generated by tools to perform tests"
    )

class ViewTestToolsResult(BaseTool):
    name = "ViewTestToolsResult"
    description = "This stores the only files extension .txt to filecoin and returns an id that can be used to review the audit results. Useful for reviewing txt files generated by audit tools."
    args_schema: Type[BaseModel] = ViewTestToolsResultInput

    def _run(
        self,
        path_to_text_file: str,
        run_manager: Optional[CallbackManagerForToolRun] = None,
    ) -> str:

        process = subprocess.run(
            ['node', '/Users/yuchenpeng/ethwaterloo/aiudit/aiudittool/storage/put-files.js', "--token=", path_to_text_file], 
            stdout=subprocess.PIPE, 
            universal_newlines=True
        )

        return process.stdout

    def _arun(
        self,
        network: NETWORKS,
        symbol: str,
        run_manager: Optional[CallbackManagerForToolRun] = None,
    ) -> str:
        raise NotImplementedError